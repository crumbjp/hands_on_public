#!/usr/bin/env ruby
require 'rrobots'
require 'optparse'
require 'ostruct'

class OptionsParser
  def self.parse!(args)
    options = OpenStruct.new
    options.resolution  = [800,800]
    options.match = Time.now.to_i + Process.pid
    options.gui = true
    options.timeout = 50000
    options.teams = 8

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: rrobots [options] file1 file2 ..."

      opts.on("--resolution x,y", Array, "X and Y resolution") do |resolution|
        options.resolution = resolution.map &:to_i
      end

      opts.on("--match N", Integer, "Replay match number N") do |n|
        options.match = n
      end

      opts.on("--timeout N", Integer, "Maximum number of ticks for a match") do |n|
        options.timeout = n
      end

      opts.on("--teams N", Integer, "Splits robots into N teams") do |n|
        options.teams = n if n > 0 && n < 8
      end

      opts.on("--[no-]gui", "Run the match with the GUI") do |y|
        options.gui = y
      end

      opts.on("--slow N", Float, "Sleep N seconds every tick") do |n|
        options.slow = n
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    opts.parse!(args)
    if ARGV.size == 0
      puts opts
      exit
    end
    return options
  end
end

def run_out_of_gui(battlefield)
  $stderr.puts 'match ends if only 1 bot/team left or dots get here-->|'

  until battlefield.game_over
    battlefield.tick
    $stderr.print "." if battlefield.time % (battlefield.timeout / 54).to_i == 0
  end
  print_outcome(battlefield)
end

def run_in_gui(battlefield, xres, yres)
  require 'rrobots/gui'
  arena = RRobotsGameWindow.new(battlefield, xres, yres)
  game_over_counter = battlefield.teams.all?{|k,t| t.size < 2} ? 250 : 500
  outcome_printed = false
  arena.on_game_over{|battlefield|
    unless outcome_printed
      print_outcome(battlefield)
      outcome_printed = true
    end
    if game_over_counter < 0
      arena.close
    end
    game_over_counter -= 1
  }
  arena.show
end

def print_outcome(battlefield)
  winners = battlefield.robots.find_all{|robot| !robot.dead}
  puts
  if battlefield.robots.size > battlefield.teams.size
    teams = battlefield.teams.find_all{|name,team| !team.all?{|robot| robot.dead} }
    puts "winner_is:     { #{teams.map {|name,team| "Team #{name}: [#{team.join(', ')}]"}.join(', ')} }"
    puts "winner_energy: { #{teams.map {|name,team| "Team #{name}: [#{team.map do |w| ('%.1f' % w.energy) end.join(', ')}]"}.join(', ')} }"
  else
    puts "winner_is:     [#{winners.map{|w|w.name}.join(', ')}]"
    puts "winner_energy: [#{winners.map{|w|'%.1f' % w.energy}.join(', ')}]"
  end
  puts "elapsed_ticks: #{battlefield.time}"
  puts
end

def setup_battlefield(options, robots, round)
  @durable_context_by_name ||= {}
  teams = Array.new([options.teams, robots.size].min){ [] }
  battlefield = Battlefield.new options.resolution[0]*2, options.resolution[1]*2, options.timeout, options.match, options.slow

  c = 0
  team_divider = (robots.size / teams.size.to_f).ceil
  robots.map! do |robot|
    begin
      begin
        require "./"+robot.downcase
      rescue LoadError
      end
      begin
        require "./"+robot
      rescue LoadError
      end

      in_game_name = File.basename(robot).sub(/\..*$/, '')
      in_game_name = in_game_name.split('_').map{|name| name[0] = name[0,1].upcase; name}.join
      team = c / team_divider
      c += 1
      robot = Object.const_get(in_game_name).new
      if options.gui
        robot.gui = true
      else
        robot.gui = false
      end
      robot.round = round
      @durable_context_by_name[c] ||= {}
      robot.durable_context = @durable_context_by_name[c]
      robotrunner = RobotRunner.new(robot, battlefield, team, options)
      robotrunner.uniq_name = "#{in_game_name}_#{c}"
      battlefield << robotrunner
    rescue Exception => error
      puts 'Error loading ' + in_game_name + '!'
      warn error
    end
    in_game_name
  end
  battlefield
end

$stdout.sync = true

options = OptionsParser.parse!(ARGV)
robots = ARGV

def print_results(head, results)
  puts head
  puts
  results.each do |result|
    puts "robots : #{result[:name]}"
    puts "    score:               #{result[:score]}"
    puts "    win:                 #{result[:win]}"
    puts "    kills:               #{result[:kills]}"
    puts "    damage_given:        #{'%.1f' % result[:damage_given]}"
    puts "    damage_taken:        #{'%.1f' % result[:damage_taken]}"
    puts "    bullet_damage_given: #{'%.1f' % result[:bullet_damage_given]}"
    puts "    bullet_damage_taken: #{'%.1f' % result[:bullet_damage_taken]}"
    puts "    ram_damage_given:    #{'%.1f' % result[:ram_damage_given]}"
    puts "    ram_damage_taken:    #{'%.1f' % result[:ram_damage_taken]}"
    puts "    ram_kills:           #{result[:ram_kills]}"
  end
end

summaries = {}
(options.match || 1).times.each do |i|
  battlefield = setup_battlefield(options, robots, i+1)
  if options.gui
    run_in_gui(battlefield, options.resolution[0], options.resolution[1])
  else
    run_out_of_gui(battlefield)
  end

  results = battlefield.robots.map do |robot|
    result = {
      win: (!robot.dead ? 1 : 0),
      name: robot.uniq_name,
      score: (!robot.dead ? 1 : 0) * 300 + (robot.kills * 50) + (robot.bullet_damage_given + (robot.ram_damage_given * 2)) * 2 + (robot.ram_kills * 100),
      kills: robot.kills,
      damage_given: robot.damage_given,
      damage_taken: robot.damage_taken,
      bullet_damage_given: robot.bullet_damage_given,
      bullet_damage_taken: robot.bullet_damage_taken,
      ram_damage_given: robot.ram_damage_given,
      ram_damage_taken: robot.ram_damage_taken,
      ram_kills: robot.ram_kills,
    }
    if summaries[robot.uniq_name]
      result.each do |k , v|
        unless v.instance_of? String
          summaries[robot.uniq_name][k] += v
        end
      end
    else
      summaries[robot.uniq_name] = result
    end
    result
  end
  print_results("=== Battile: #{i} ===", results)
end
print_results('=== Finally ===', summaries.values.sort{|a, b| b[:score] <=> a[:score]})

exit 0
